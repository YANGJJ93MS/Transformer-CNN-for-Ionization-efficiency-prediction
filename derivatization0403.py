# -*- coding: utf-8 -*-
"""derivatization0403.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jO-oe9W0WY7fZaaPC71Iy4rpSZPxYN8z
"""

# For Google Colaboratory
import sys, os
if 'google.colab' in sys.modules:
    # mount google drive
    from google.colab import drive
    drive.mount('/content/gdrive')
    # find automatically the path of the folder containing "file_name" :
    file_name = 'derivatization0403.ipynb'
    import subprocess
    path_to_file = subprocess.check_output('find . -type f -name ' + str(file_name), shell=True).decode("utf-8")
    path_to_file = path_to_file.replace(file_name,"").replace('\n',"")
    os.chdir(path_to_file)
    #!pwd

# install rdkit
#!pip install kora
import kora.install.rdkit

# install molmass for molecular mass calculation
#!pip install molmass

import rdkit.Chem as Chem 
from rdkit.Chem import AllChem
from rdkit.Chem import Descriptors
from rdkit.Chem import rdMolDescriptors
from molmass import Formula

def canonicalize_smiles(smiles):
  '''canonicalize compound smiles'''
  mol = Chem.MolFromSmiles(smiles)
  if mol is not None:
    return Chem.MolToSmiles(mol, isomericSmiles=True)
  else:
    return ''

def whether_COOH(smiles):
  '''determine whether compound contains carboxyl group'''
  mol = Chem.MolFromSmiles(smiles)
  COOH_patt = Chem.MolFromSmarts('[#6]C(=O)[O;H,-1]')
  COOH_info = mol.HasSubstructMatch(COOH_patt)
  return COOH_info

def whether_OH(smiles):
  '''determine whether compound contains hydroxyl group'''
  mol = Chem.MolFromSmiles(smiles)
  ArOH_patt = Chem.MolFromSmarts('c[OH]')
  ArOH_info = mol.HasSubstructMatch(ArOH_patt)
  AlOH_patt = Chem.MolFromSmarts('[C!$(C=O)]-[OH]')
  AlOH_info = mol.HasSubstructMatch(AlOH_patt)
  if ArOH_info or AlOH_info:
    return True
  else:
    return False

def MEPA_derivatization(smiles):
  '''generate MPEA product'''
  mol = Chem.MolFromSmiles(smiles)
  repl = Chem.MolFromSmiles('CN(C)CCC1=CC=CC=C1')
  patt = Chem.MolFromSmarts('[C$(C=O)]-[OH]')
  rms = AllChem.ReplaceSubstructs(mol, patt, repl)
  try:
    return Chem.MolToSmiles(rms[0])
  except:
    return ''

def DnsCl_derivatization(smiles):
  '''generate DnsCl product'''
  mol = Chem.MolFromSmiles(smiles)
  repl = Chem.MolFromSmiles('CN(C)c(ccc1)c2c1c(S(=O)(OC)=O)ccc2')
  if mol.HasSubstructMatch(Chem.MolFromSmarts('c[OH]')):
    rms = AllChem.ReplaceSubstructs(mol,Chem.MolFromSmarts('c[OH]'),repl,False,13)
    return Chem.MolToSmiles(rms[0])
  elif mol.HasSubstructMatch(Chem.MolFromSmarts('[C!$(C=O)]-[OH]')):
    rms = AllChem.ReplaceSubstructs(mol,Chem.MolFromSmarts('[C!$(C=O)]-[OH]'),repl,False,13)
    return Chem.MolToSmiles(rms[0])
  else:
    return ''

def calculate_mass(smiles):
  '''calculate molecular mass'''
  mol = Chem.MolFromSmiles(smiles)
  f = Formula(rdMolDescriptors.CalcMolFormula(mol))
  return f.isotope.mass

def derivatization(compound_smiles, derivatization_method):
  '''get derivatization product and its molecular mass'''
  if derivatization_method == "MPEA" and whether_COOH:
    product = MEPA_derivatization(canonicalize_smiles(compound_smiles))
    mass = calculate_mass(product)
    return product, mass
  elif derivatization_method == "DnsCl" and whether_OH:
    product = DnsCl_derivatization(canonicalize_smiles(compound_smiles))
    mass = calculate_mass(product)
    return product, mass
  else:
    return '', ''

derivatization("CCC(C)(C1=CC=C(O)C=C1)C1=CC=C(O)C=C1", "DnsCl")
